[{"content":"This post explores the theory and some follow-up papers of one of the most influential machine learning papers: Generative Adversarial Networks (GANs). Contrary to other deep learning models, I find that generative models are supported by more rigorous mathematics that are easily digestible.\nAs we understand the theory behind GANs, we will recognize its limitations and the reason behind its instability. This naturally leads us to Wasserstein Generative Adversarial Networks (WGANs), which apply useful concepts from Optimal Transport (OT).\nSince these papers are quite \u0026ldquo;old\u0026rdquo; by machine learning standards, there are many blog posts that already discuss them. The following is my own understanding plus some parts I find missing in other posts. A Kaggle notebook is also provided to show the algorithms learning on a toy example.\nGANs Cool History The story is that GAN was conceived at a bar in Montr√©al (Les 3 Brasseurs) by Ian Goodfellow during his Ph.D. studies. At the bar, he proposed GAN to his friends, but quickly faced skepticism.\nThe idea of jointly training a pair of networks against each other seemed too difficult when training just one network was difficult enough. Perhaps due to the influence of alcohol, he was still confident, so he headed home, coded up GAN, and produced amazing results on MNIST (a handwritten digit recognition dataset).\nAs of today, the seminal paper published in NeurIPS has over 75,000 citations, and has become a cornerstone in the field of unsupervised learning.\nGAN Architecture GANs learn the latent distribution of the unlabeled data through a pair of networks (the generator and the discriminator) that are competing against each other. An analogy is used in the original paper: the generator is a team of counterfeiters that produces fake currency, while the discriminator is the police trying to detect forgery. When both networks are optimal, the generator is able to produce counterfeit currency that is indistinguishable from the real ones.\nFigure 1: A GAN consists of two components: the discriminator $D$ outputs the probability that a given sample is real, and the generator $G$ produces synthetic samples given a latent variable $z$ sampled from the base distribution, e.g. $z \\sim \\mathcal{N}(0,1)$. The discriminator parameters $\\theta_d$ are updated to assigns high probability to real samples and low probability to synthetic samples, while the generator parameters $\\theta_g$ are updated to \"fool\" the discriminator into assigning high probabilities to the synthetic samples. First, let\u0026rsquo;s define $p_z, p_g, p_r$ as the probability distributions of the latent variable $z$, the generator, and real samples respectively.\nThe discriminator $D(x,\\theta_d)\\to [0, 1]$ outputs a scalar that represents the probability that $x$ came from $p_r$ rather than $p_g$. The generator $G(z, \\theta_g)$ then learns a mapping from $z$ to the data space. In other words, it is learning $p_g$ over data $x$, where $x\\sim p_r(x)$.\n$D$ is trained in a binary classification fashion. It maximizes the probability of assigning the correct label to both real samples $x$ and fake samples $x\u0026rsquo; = G(z)$. This is equivalent to maximizing $$\\mathbb{E}_{x\\sim p_r(x)}\\left[\\log (D(x))\\right] +\\mathbb{E}_{z\\sim p_z(z)}\\left[\\log(1- D(G(z)))\\right].$$\nThe generator then minimizes the probability of the discriminator assigning the correct label to the fake samples: $$\\mathbb{E}_{z\\sim p_z(z)}\\left[\\log(1- D(G(z)))\\right].$$ In other words, they are playing a MinMax game with the following loss function: $$ \\begin{equation}\\label{eq: gan_loss} \\min_{G}\\max_{D} L(G, D) = \\mathbb{E}_{x\\sim p_r(x)}\\left[\\log (D(x))\\right] + \\mathbb{E}_{z\\sim p_z(z)}\\left[\\log(1- D(G(z)))\\right] \\end{equation} $$\nHow to train GANs Since the discriminator and the generator are playing a two-player non-cooperative game, training them can be difficult, and similar to finding the Nash equilibrium (Salimans et al., 2016).\nIn practice, this is traditionally done with the following pipeline: in each training loop, fix the generator and update the discriminator for $k$ steps, then fix the discriminator and update the generator for 1 step.\nTo update the discriminator, we fix the generator and isolate the $\\max_{D} L(G, D)$ part of Equation $\\eqref{eq: gan_loss}$: $$ \\begin{aligned} L(\\theta_d) \u0026amp; = \\mathbb{E}_{x\\sim p_r(x)}\\left[\\log (D(x, \\theta_d))\\right] + \\mathbb{E}_{z\\sim p_z(z)}\\left[\\log(1- D(G^*(z), \\theta_d))\\right] \\\\ \u0026amp; \\approx \\frac{1}{m}\\sum_{i=1}^m\\left[\\log (D(x_i, \\theta_d))\\right] + \\frac{1}{n}\\sum_{j=1}^n\\left[ \\log( 1 - D ( G^* (z_j), \\theta_d)) \\right], \\end{aligned} $$ where $m$ represents the number of real examples, $n$ represents the number of fake examples, and $G^*(z)$ represents the fixed generator.\nTo update the generator, we use the following loss function: $$ \\begin{aligned} L(\\theta_g) \u0026amp; = \\left(\\mathbb{E}_{x\\sim p_r(x)}\\left[\\log (D^*(x))\\right] + \\mathbb{E}_{z\\sim p_z(z)}\\left[\\log(1- D^*(G(z, \\theta_g)))\\right]\\right) \\\\ \u0026amp; \\approx \\frac{1}{n}\\sum_{j=1}^n\\left[ \\log ( 1 - D^* (G(z_j, \\theta_g)))\\right] \\end{aligned}. $$ Note that we remove the first term since it is not related to $G(z, \\theta_g)$.\nThe Optimal Discriminator and Generator It is intuitive that in theory, the perfect generator replicates the entire data space, in other words, $p_g = p_r$ (see proof below. It is natural then to think that the perfect discriminator can always differentiate between real and synthetic samples, however in theory, the best discriminator achieves random guessing.\nLil\u0026rsquo;Log provides a great breakdown on the math behind this. The general idea is that if we take the derivative of the discriminator\u0026rsquo;s loss function with a fixed generator, and set it to zero, $D^*(x) = \\frac{p_r(x)}{p_r(x)+p_g(x)}$. And since the perfect generator enables $p_g = p_r$, $D^*(x) = \\frac{1}{2}$.\nGiven $G^*(z, \\theta_g)$ such that $p_r = p_g$, and $D^*(x, \\theta_d)$ such that $D^*(x) = \\frac{1}{2}$, we can derive the global minimum of the loss function: $$ \\begin{aligned} L(G^*, D^*) \u0026amp;= \\mathbb{E}_{x\\sim p_r(x)}\\left[-\\log2\\right] +\\mathbb{E}_{x\\sim p_g(x)}\\left[-\\log2)\\right]\\\\ \u0026amp;= -2\\log2 \\end{aligned} $$ Thus, the best possible value of $L(G, D)$ is $-2\\log2$.\nTangent on KL \u0026amp; JS Divergence Kullback-Leibler (KL) divergence is one of the most commonly used measures in machine learning for comparing two probability distributions. Given distributions $p, q$, it measures how different $q$ is from $p$ with the following formulation: $$ KL(p\\Vert q) = \\int_{x}p(x)\\log\\frac{p(x)}{q(x)}dx. $$ Usually, $p$ is the true distribution, and $q$ is the model. The interpretation from information theory is that KL divergence measure the extra information gain (relative entropy) when switching from $q$ to $p$.\nThere are many limitations to KL divergence, one of the most being its asymmetry. If we explore the Wikipedia page for KL divergence, we will find that the Jensen-Shannon (JS) divergence addresses this issue by taking the KL from both sides of the mixture distribution: $$ JSD(p\\Vert q) = \\frac{1}{2}KL(p\\Vert\\frac{p+q}{2}) + \\frac{1}{2}KL(q\\Vert\\frac{p+q}{2}). $$\nWith this tool in hand, we can now prove that the perfect generator $p_g$ replicates the data space $p_r$. Recall that the optimal discriminator $D^*(x) = \\frac{p_r(x)}{p_r(x)+p_g(x)}$, if we plug this into Equation $\\eqref{eq: gan_loss}$, we get: $$ \\begin{aligned} L(G, D^{*}) \u0026amp;= \\mathbb{E}_{x\\sim p_r(x)}\\left[\\log (D^*(x))\\right] + \\mathbb{E}_{x\\sim p_g(x)}\\left[\\log(1- D^*(x)\\right]\\\\ \u0026amp;= \\int_{x}p_r(x)\\log\\left(\\frac{2\\cdot p_r(x)}{2\\cdot(p_r(x)+p_g(x))}\\right)dx\\\\ \u0026amp;\\phantom{=} + \\int_{x}p_g(x)\\log\\left(\\frac{2\\cdot p_g(x)}{2\\cdot(p_r(x)+p_g(x))}\\right)dx\\\\ \u0026amp;= -2\\log2 + \\int_{x}p_r(x)\\log\\left(\\frac{p_r(x)}{\\frac{p_r(x)+p_g(x)}{2}}\\right)dx\\\\ \u0026amp;\\phantom{=} + \\int_{x}p_g(x)\\log\\left(\\frac{p_g(x)}{\\frac{p_r(x)+p_g(x)}{2}}\\right)dx\\\\ \u0026amp;= -2\\log2 + KL(p_r\\Vert\\frac{p_r+p_g}{2}) + KL(p_g\\Vert\\frac{p_r+p_g}{2})\\\\ \u0026amp;= -2\\log2 + 2JSD(p_r\\Vert p_g). \\end{aligned} $$ Thus, when the discriminator is optimal, the loss function is equivalent to measuring the difference between $p_g$ and $p_r$ with JS divergence. Also, when the generator is optimal, $p_r = p_g$, and $2JSD(p_r, p_g)=0$, so $L(G^*, D^*) = -2\\log2$, which is the global optimal.\nThe Real Cost Function ","permalink":"https://rdh1115.github.io/posts/literature/gan-wgan/","summary":"\u003cp\u003eThis post explores the theory and some follow-up papers of  one of the most influential machine learning papers:\n\u003ca href=\"https://arxiv.org/pdf/1406.2661\"\u003eGenerative Adversarial Networks\u003c/a\u003e (GANs).\nContrary to other deep learning models, I find that generative models are supported by more rigorous mathematics that are easily digestible.\u003c/p\u003e\n\u003cp\u003eAs we understand the theory behind GANs, we will recognize its limitations and the reason behind its instability.\nThis naturally leads us to\n\u003ca href=\"https://arxiv.org/pdf/1701.07875\"\u003eWasserstein Generative Adversarial Networks\u003c/a\u003e (WGANs),\nwhich apply useful concepts from \u003ca href=\"https://en.wikipedia.org/wiki/Transportation_theory_%28mathematics%29\"\u003eOptimal Transport\u003c/a\u003e (OT).\u003c/p\u003e","title":"What is GAN and WGAN"}]